// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  upvote    Upvote[]
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String    @unique
  name     String    @unique
  password String
  score    Scores?
  posts    Post[]
  upvote   Upvote[]
  Comment  Comment[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  String?   @db.ObjectId
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Scores {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
  score  Int
}

model RevokedTokens {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique
}

model Upvote {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  value  Int
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@unique([postId, userId])
}
